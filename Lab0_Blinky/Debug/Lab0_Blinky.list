
Lab0_Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002968  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002b08  08002b08  00003b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b74  08002b74  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b74  08002b74  00003b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b7c  08002b7c  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b7c  08002b7c  00003b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b80  08002b80  00003b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002b84  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  08002be0  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08002be0  00004210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000723c  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013b8  00000000  00000000  0000b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  0000c680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004bb  00000000  00000000  0000ccb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015499  00000000  00000000  0000d173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f0e  00000000  00000000  0002260c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084dbc  00000000  00000000  0002a51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af2d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d5c  00000000  00000000  000af31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000b1078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002af0 	.word	0x08002af0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08002af0 	.word	0x08002af0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	@ 0x58
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fa5d 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f83f 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f8d3 	bl	8000728 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f8a7 	bl	80006d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char 		str[81] = { '\0' };
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	224d      	movs	r2, #77	@ 0x4d
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fe2d 	bl	80021f0 <memset>
  uint16_t	str_len = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
  int 		n_blink = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	657b      	str	r3, [r7, #84]	@ 0x54
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2120      	movs	r1, #32
 80005a4:	4812      	ldr	r0, [pc, #72]	@ (80005f0 <main+0x80>)
 80005a6:	f000 fd45 	bl	8001034 <HAL_GPIO_WritePin>
	 HAL_Delay(2000);
 80005aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005ae:	f000 fab3 	bl	8000b18 <HAL_Delay>
	 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <main+0x80>)
 80005b8:	f000 fd3c 	bl	8001034 <HAL_GPIO_WritePin>
	 HAL_Delay(8000);
 80005bc:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 80005c0:	f000 faaa 	bl	8000b18 <HAL_Delay>
	 n_blink++;
 80005c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80005c6:	3301      	adds	r3, #1
 80005c8:	657b      	str	r3, [r7, #84]	@ 0x54
	 str_len = sprintf(str, "Blinky has succeded %d times \r\n", n_blink);
 80005ca:	463b      	mov	r3, r7
 80005cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80005ce:	4909      	ldr	r1, [pc, #36]	@ (80005f4 <main+0x84>)
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fded 	bl	80021b0 <siprintf>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	 HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80005dc:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 80005e0:	4639      	mov	r1, r7
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <main+0x88>)
 80005e8:	f001 fa26 	bl	8001a38 <HAL_UART_Transmit>
	 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005ec:	bf00      	nop
 80005ee:	e7d7      	b.n	80005a0 <main+0x30>
 80005f0:	40020000 	.word	0x40020000
 80005f4:	08002b08 	.word	0x08002b08
 80005f8:	20000078 	.word	0x20000078

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	@ 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	@ 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fdf0 	bl	80021f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b29      	ldr	r3, [pc, #164]	@ (80006cc <SystemClock_Config+0xd0>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	4a28      	ldr	r2, [pc, #160]	@ (80006cc <SystemClock_Config+0xd0>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000630:	4b26      	ldr	r3, [pc, #152]	@ (80006cc <SystemClock_Config+0xd0>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b23      	ldr	r3, [pc, #140]	@ (80006d0 <SystemClock_Config+0xd4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000648:	4a21      	ldr	r2, [pc, #132]	@ (80006d0 <SystemClock_Config+0xd4>)
 800064a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <SystemClock_Config+0xd4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000670:	2310      	movs	r3, #16
 8000672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000674:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000678:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067a:	2304      	movs	r3, #4
 800067c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067e:	2307      	movs	r3, #7
 8000680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fcee 	bl	8001068 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000692:	f000 f8b7 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ff50 	bl	8001558 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006be:	f000 f8a1 	bl	8000804 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	@ 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <MX_USART2_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 800070c:	f001 f944 	bl	8001998 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f875 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000078 	.word	0x20000078
 8000724:	40004400 	.word	0x40004400

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	@ 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b2d      	ldr	r3, [pc, #180]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a25      	ldr	r2, [pc, #148]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a1e      	ldr	r2, [pc, #120]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a17      	ldr	r2, [pc, #92]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	4812      	ldr	r0, [pc, #72]	@ (80007fc <MX_GPIO_Init+0xd4>)
 80007b4:	f000 fc3e 	bl	8001034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	480c      	ldr	r0, [pc, #48]	@ (8000800 <MX_GPIO_Init+0xd8>)
 80007d0:	f000 faac 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007d4:	2320      	movs	r3, #32
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4804      	ldr	r0, [pc, #16]	@ (80007fc <MX_GPIO_Init+0xd4>)
 80007ec:	f000 fa9e 	bl	8000d2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	@ 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020800 	.word	0x40020800

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <Error_Handler+0x8>

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b10      	ldr	r3, [pc, #64]	@ (800085c <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081e:	4a0f      	ldr	r2, [pc, #60]	@ (800085c <HAL_MspInit+0x4c>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000824:	6453      	str	r3, [r2, #68]	@ 0x44
 8000826:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	4a08      	ldr	r2, [pc, #32]	@ (800085c <HAL_MspInit+0x4c>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	@ 0x40
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800084e:	2007      	movs	r0, #7
 8000850:	f000 fa38 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800

08000860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a19      	ldr	r2, [pc, #100]	@ (80008e4 <HAL_UART_MspInit+0x84>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d12b      	bne.n	80008da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <HAL_UART_MspInit+0x88>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	4a17      	ldr	r2, [pc, #92]	@ (80008e8 <HAL_UART_MspInit+0x88>)
 800088c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000890:	6413      	str	r3, [r2, #64]	@ 0x40
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <HAL_UART_MspInit+0x88>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <HAL_UART_MspInit+0x88>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a10      	ldr	r2, [pc, #64]	@ (80008e8 <HAL_UART_MspInit+0x88>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <HAL_UART_MspInit+0x88>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ba:	230c      	movs	r3, #12
 80008bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ca:	2307      	movs	r3, #7
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	@ (80008ec <HAL_UART_MspInit+0x8c>)
 80008d6:	f000 fa29 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008da:	bf00      	nop
 80008dc:	3728      	adds	r7, #40	@ 0x28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40004400 	.word	0x40004400
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <NMI_Handler+0x4>

080008f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <MemManage_Handler+0x4>

08000908 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <UsageFault_Handler+0x4>

08000918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000946:	f000 f8c7 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	@ (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	@ (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f001 fc3e 	bl	8002200 <__errno>
 8000984:	4603      	mov	r3, r0
 8000986:	220c      	movs	r2, #12
 8000988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	4a05      	ldr	r2, [pc, #20]	@ (80009b4 <_sbrk+0x64>)
 80009a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20018000 	.word	0x20018000
 80009b0:	00000400 	.word	0x00000400
 80009b4:	200000c0 	.word	0x200000c0
 80009b8:	20000210 	.word	0x20000210

080009bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	@ (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009e4:	f7ff ffea 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e8:	480c      	ldr	r0, [pc, #48]	@ (8000a1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ea:	490d      	ldr	r1, [pc, #52]	@ (8000a20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000a24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a00:	4c0a      	ldr	r4, [pc, #40]	@ (8000a2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f001 fbfd 	bl	800220c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a12:	f7ff fdad 	bl	8000570 <main>
  bx  lr    
 8000a16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a24:	08002b84 	.word	0x08002b84
  ldr r2, =_sbss
 8000a28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a2c:	20000210 	.word	0x20000210

08000a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a38:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <HAL_Init+0x40>)
 8000a3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <HAL_Init+0x40>)
 8000a4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	@ (8000a74 <HAL_Init+0x40>)
 8000a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f931 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 f808 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff fed2 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023c00 	.word	0x40023c00

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_InitTick+0x54>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <HAL_InitTick+0x58>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f93b 	bl	8000d12 <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00e      	b.n	8000ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d80a      	bhi.n	8000ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 f911 	bl	8000cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4a06      	ldr	r2, [pc, #24]	@ (8000ad4 <HAL_InitTick+0x5c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	@ (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008
 8000afc:	200000c4 	.word	0x200000c4

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	200000c4 	.word	0x200000c4

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff ffee 	bl	8000b00 <HAL_GetTick>
 8000b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b3e:	bf00      	nop
 8000b40:	f7ff ffde 	bl	8000b00 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	@ (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	@ (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	@ 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	@ 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f7ff ff8e 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff47 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff5c 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff8e 	bl	8000c18 <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5d 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ffb0 	bl	8000c80 <SysTick_Config>
 8000d20:	4603      	mov	r3, r0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	@ 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	e159      	b.n	8000ffc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f040 8148 	bne.w	8000ff6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d005      	beq.n	8000d7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d130      	bne.n	8000de0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db4:	2201      	movs	r2, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	091b      	lsrs	r3, r3, #4
 8000dca:	f003 0201 	and.w	r2, r3, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d017      	beq.n	8000e1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d123      	bne.n	8000e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	69b9      	ldr	r1, [r7, #24]
 8000e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0203 	and.w	r2, r3, #3
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80a2 	beq.w	8000ff6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b57      	ldr	r3, [pc, #348]	@ (8001014 <HAL_GPIO_Init+0x2e8>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	4a56      	ldr	r2, [pc, #344]	@ (8001014 <HAL_GPIO_Init+0x2e8>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec2:	4b54      	ldr	r3, [pc, #336]	@ (8001014 <HAL_GPIO_Init+0x2e8>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ece:	4a52      	ldr	r2, [pc, #328]	@ (8001018 <HAL_GPIO_Init+0x2ec>)
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a49      	ldr	r2, [pc, #292]	@ (800101c <HAL_GPIO_Init+0x2f0>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d019      	beq.n	8000f2e <HAL_GPIO_Init+0x202>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a48      	ldr	r2, [pc, #288]	@ (8001020 <HAL_GPIO_Init+0x2f4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d013      	beq.n	8000f2a <HAL_GPIO_Init+0x1fe>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a47      	ldr	r2, [pc, #284]	@ (8001024 <HAL_GPIO_Init+0x2f8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d00d      	beq.n	8000f26 <HAL_GPIO_Init+0x1fa>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a46      	ldr	r2, [pc, #280]	@ (8001028 <HAL_GPIO_Init+0x2fc>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d007      	beq.n	8000f22 <HAL_GPIO_Init+0x1f6>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a45      	ldr	r2, [pc, #276]	@ (800102c <HAL_GPIO_Init+0x300>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d101      	bne.n	8000f1e <HAL_GPIO_Init+0x1f2>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e008      	b.n	8000f30 <HAL_GPIO_Init+0x204>
 8000f1e:	2307      	movs	r3, #7
 8000f20:	e006      	b.n	8000f30 <HAL_GPIO_Init+0x204>
 8000f22:	2303      	movs	r3, #3
 8000f24:	e004      	b.n	8000f30 <HAL_GPIO_Init+0x204>
 8000f26:	2302      	movs	r3, #2
 8000f28:	e002      	b.n	8000f30 <HAL_GPIO_Init+0x204>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <HAL_GPIO_Init+0x204>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	f002 0203 	and.w	r2, r2, #3
 8000f36:	0092      	lsls	r2, r2, #2
 8000f38:	4093      	lsls	r3, r2
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f40:	4935      	ldr	r1, [pc, #212]	@ (8001018 <HAL_GPIO_Init+0x2ec>)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	3302      	adds	r3, #2
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4e:	4b38      	ldr	r3, [pc, #224]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f72:	4a2f      	ldr	r2, [pc, #188]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f78:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f9c:	4a24      	ldr	r2, [pc, #144]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fa2:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc6:	4a1a      	ldr	r2, [pc, #104]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	2b0f      	cmp	r3, #15
 8001000:	f67f aea2 	bls.w	8000d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3724      	adds	r7, #36	@ 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40013800 	.word	0x40013800
 800101c:	40020000 	.word	0x40020000
 8001020:	40020400 	.word	0x40020400
 8001024:	40020800 	.word	0x40020800
 8001028:	40020c00 	.word	0x40020c00
 800102c:	40021000 	.word	0x40021000
 8001030:	40013c00 	.word	0x40013c00

08001034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001050:	e003      	b.n	800105a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	041a      	lsls	r2, r3, #16
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	619a      	str	r2, [r3, #24]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e267      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d075      	beq.n	8001172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001086:	4b88      	ldr	r3, [pc, #544]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b04      	cmp	r3, #4
 8001090:	d00c      	beq.n	80010ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001092:	4b85      	ldr	r3, [pc, #532]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800109a:	2b08      	cmp	r3, #8
 800109c:	d112      	bne.n	80010c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109e:	4b82      	ldr	r3, [pc, #520]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010aa:	d10b      	bne.n	80010c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ac:	4b7e      	ldr	r3, [pc, #504]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d05b      	beq.n	8001170 <HAL_RCC_OscConfig+0x108>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d157      	bne.n	8001170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e242      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010cc:	d106      	bne.n	80010dc <HAL_RCC_OscConfig+0x74>
 80010ce:	4b76      	ldr	r3, [pc, #472]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a75      	ldr	r2, [pc, #468]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e01d      	b.n	8001118 <HAL_RCC_OscConfig+0xb0>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010e4:	d10c      	bne.n	8001100 <HAL_RCC_OscConfig+0x98>
 80010e6:	4b70      	ldr	r3, [pc, #448]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a6f      	ldr	r2, [pc, #444]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b6d      	ldr	r3, [pc, #436]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a6c      	ldr	r2, [pc, #432]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e00b      	b.n	8001118 <HAL_RCC_OscConfig+0xb0>
 8001100:	4b69      	ldr	r3, [pc, #420]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a68      	ldr	r2, [pc, #416]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b66      	ldr	r3, [pc, #408]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a65      	ldr	r2, [pc, #404]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fcee 	bl	8000b00 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fcea 	bl	8000b00 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	@ 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e207      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	4b5b      	ldr	r3, [pc, #364]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0xc0>
 8001146:	e014      	b.n	8001172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fcda 	bl	8000b00 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fcd6 	bl	8000b00 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	@ 0x64
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e1f3      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	4b51      	ldr	r3, [pc, #324]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0xe8>
 800116e:	e000      	b.n	8001172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d063      	beq.n	8001246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800117e:	4b4a      	ldr	r3, [pc, #296]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118a:	4b47      	ldr	r3, [pc, #284]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001192:	2b08      	cmp	r3, #8
 8001194:	d11c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001196:	4b44      	ldr	r3, [pc, #272]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d116      	bne.n	80011d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a2:	4b41      	ldr	r3, [pc, #260]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d005      	beq.n	80011ba <HAL_RCC_OscConfig+0x152>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d001      	beq.n	80011ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e1c7      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ba:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4937      	ldr	r1, [pc, #220]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ce:	e03a      	b.n	8001246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d020      	beq.n	800121a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d8:	4b34      	ldr	r3, [pc, #208]	@ (80012ac <HAL_RCC_OscConfig+0x244>)
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011de:	f7ff fc8f 	bl	8000b00 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e6:	f7ff fc8b 	bl	8000b00 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e1a8      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	4b2b      	ldr	r3, [pc, #172]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001204:	4b28      	ldr	r3, [pc, #160]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4925      	ldr	r1, [pc, #148]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001214:	4313      	orrs	r3, r2
 8001216:	600b      	str	r3, [r1, #0]
 8001218:	e015      	b.n	8001246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121a:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <HAL_RCC_OscConfig+0x244>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001220:	f7ff fc6e 	bl	8000b00 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001228:	f7ff fc6a 	bl	8000b00 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e187      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123a:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d036      	beq.n	80012c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d016      	beq.n	8001288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <HAL_RCC_OscConfig+0x248>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001260:	f7ff fc4e 	bl	8000b00 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001268:	f7ff fc4a 	bl	8000b00 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e167      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 800127c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0x200>
 8001286:	e01b      	b.n	80012c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_RCC_OscConfig+0x248>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128e:	f7ff fc37 	bl	8000b00 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001294:	e00e      	b.n	80012b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001296:	f7ff fc33 	bl	8000b00 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d907      	bls.n	80012b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e150      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
 80012a8:	40023800 	.word	0x40023800
 80012ac:	42470000 	.word	0x42470000
 80012b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b4:	4b88      	ldr	r3, [pc, #544]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1ea      	bne.n	8001296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 8097 	beq.w	80013fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d2:	4b81      	ldr	r3, [pc, #516]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10f      	bne.n	80012fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b7d      	ldr	r3, [pc, #500]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	4a7c      	ldr	r2, [pc, #496]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ee:	4b7a      	ldr	r3, [pc, #488]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fa:	2301      	movs	r3, #1
 80012fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fe:	4b77      	ldr	r3, [pc, #476]	@ (80014dc <HAL_RCC_OscConfig+0x474>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001306:	2b00      	cmp	r3, #0
 8001308:	d118      	bne.n	800133c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130a:	4b74      	ldr	r3, [pc, #464]	@ (80014dc <HAL_RCC_OscConfig+0x474>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a73      	ldr	r2, [pc, #460]	@ (80014dc <HAL_RCC_OscConfig+0x474>)
 8001310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001316:	f7ff fbf3 	bl	8000b00 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131e:	f7ff fbef 	bl	8000b00 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e10c      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001330:	4b6a      	ldr	r3, [pc, #424]	@ (80014dc <HAL_RCC_OscConfig+0x474>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d106      	bne.n	8001352 <HAL_RCC_OscConfig+0x2ea>
 8001344:	4b64      	ldr	r3, [pc, #400]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001348:	4a63      	ldr	r2, [pc, #396]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001350:	e01c      	b.n	800138c <HAL_RCC_OscConfig+0x324>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b05      	cmp	r3, #5
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x30c>
 800135a:	4b5f      	ldr	r3, [pc, #380]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800135e:	4a5e      	ldr	r2, [pc, #376]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6713      	str	r3, [r2, #112]	@ 0x70
 8001366:	4b5c      	ldr	r3, [pc, #368]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800136a:	4a5b      	ldr	r2, [pc, #364]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6713      	str	r3, [r2, #112]	@ 0x70
 8001372:	e00b      	b.n	800138c <HAL_RCC_OscConfig+0x324>
 8001374:	4b58      	ldr	r3, [pc, #352]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001378:	4a57      	ldr	r2, [pc, #348]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 800137a:	f023 0301 	bic.w	r3, r3, #1
 800137e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001380:	4b55      	ldr	r3, [pc, #340]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001384:	4a54      	ldr	r2, [pc, #336]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001386:	f023 0304 	bic.w	r3, r3, #4
 800138a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d015      	beq.n	80013c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001394:	f7ff fbb4 	bl	8000b00 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139a:	e00a      	b.n	80013b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139c:	f7ff fbb0 	bl	8000b00 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e0cb      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b2:	4b49      	ldr	r3, [pc, #292]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0ee      	beq.n	800139c <HAL_RCC_OscConfig+0x334>
 80013be:	e014      	b.n	80013ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fb9e 	bl	8000b00 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c6:	e00a      	b.n	80013de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff fb9a 	bl	8000b00 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e0b5      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013de:	4b3e      	ldr	r3, [pc, #248]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1ee      	bne.n	80013c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d105      	bne.n	80013fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f0:	4b39      	ldr	r3, [pc, #228]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	4a38      	ldr	r2, [pc, #224]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a1 	beq.w	8001548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001406:	4b34      	ldr	r3, [pc, #208]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b08      	cmp	r3, #8
 8001410:	d05c      	beq.n	80014cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d141      	bne.n	800149e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141a:	4b31      	ldr	r3, [pc, #196]	@ (80014e0 <HAL_RCC_OscConfig+0x478>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fb6e 	bl	8000b00 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff fb6a 	bl	8000b00 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e087      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143a:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69da      	ldr	r2, [r3, #28]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001454:	019b      	lsls	r3, r3, #6
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145c:	085b      	lsrs	r3, r3, #1
 800145e:	3b01      	subs	r3, #1
 8001460:	041b      	lsls	r3, r3, #16
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001468:	061b      	lsls	r3, r3, #24
 800146a:	491b      	ldr	r1, [pc, #108]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001470:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <HAL_RCC_OscConfig+0x478>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fb43 	bl	8000b00 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff fb3f 	bl	8000b00 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e05c      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x416>
 800149c:	e054      	b.n	8001548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <HAL_RCC_OscConfig+0x478>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb2c 	bl	8000b00 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff fb28 	bl	8000b00 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e045      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x444>
 80014ca:	e03d      	b.n	8001548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d107      	bne.n	80014e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e038      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40007000 	.word	0x40007000
 80014e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <HAL_RCC_OscConfig+0x4ec>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d028      	beq.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d121      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150a:	429a      	cmp	r2, r3
 800150c:	d11a      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001514:	4013      	ands	r3, r2
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800151a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800151c:	4293      	cmp	r3, r2
 800151e:	d111      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	3b01      	subs	r3, #1
 800152e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d107      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0cc      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800156c:	4b68      	ldr	r3, [pc, #416]	@ (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d90c      	bls.n	8001594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b65      	ldr	r3, [pc, #404]	@ (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b63      	ldr	r3, [pc, #396]	@ (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0b8      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ac:	4b59      	ldr	r3, [pc, #356]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a58      	ldr	r2, [pc, #352]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c4:	4b53      	ldr	r3, [pc, #332]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4a52      	ldr	r2, [pc, #328]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d0:	4b50      	ldr	r3, [pc, #320]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	494d      	ldr	r1, [pc, #308]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d044      	beq.n	8001678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b47      	ldr	r3, [pc, #284]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d119      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e07f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d003      	beq.n	8001616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001612:	2b03      	cmp	r3, #3
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001616:	4b3f      	ldr	r3, [pc, #252]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e06f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001626:	4b3b      	ldr	r3, [pc, #236]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e067      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001636:	4b37      	ldr	r3, [pc, #220]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f023 0203 	bic.w	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4934      	ldr	r1, [pc, #208]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	4313      	orrs	r3, r2
 8001646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001648:	f7ff fa5a 	bl	8000b00 <HAL_GetTick>
 800164c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	e00a      	b.n	8001666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001650:	f7ff fa56 	bl	8000b00 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e04f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001666:	4b2b      	ldr	r3, [pc, #172]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 020c 	and.w	r2, r3, #12
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	429a      	cmp	r2, r3
 8001676:	d1eb      	bne.n	8001650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001678:	4b25      	ldr	r3, [pc, #148]	@ (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d20c      	bcs.n	80016a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e032      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ac:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4916      	ldr	r1, [pc, #88]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ca:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	490e      	ldr	r1, [pc, #56]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016de:	f000 f821 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	490a      	ldr	r1, [pc, #40]	@ (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	5ccb      	ldrb	r3, [r1, r3]
 80016f2:	fa22 f303 	lsr.w	r3, r2, r3
 80016f6:	4a09      	ldr	r2, [pc, #36]	@ (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <HAL_RCC_ClockConfig+0x1c8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff f9ba 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023c00 	.word	0x40023c00
 8001714:	40023800 	.word	0x40023800
 8001718:	08002b28 	.word	0x08002b28
 800171c:	20000000 	.word	0x20000000
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001728:	b094      	sub	sp, #80	@ 0x50
 800172a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001730:	2300      	movs	r3, #0
 8001732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001734:	2300      	movs	r3, #0
 8001736:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800173c:	4b79      	ldr	r3, [pc, #484]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b08      	cmp	r3, #8
 8001746:	d00d      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x40>
 8001748:	2b08      	cmp	r3, #8
 800174a:	f200 80e1 	bhi.w	8001910 <HAL_RCC_GetSysClockFreq+0x1ec>
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x34>
 8001752:	2b04      	cmp	r3, #4
 8001754:	d003      	beq.n	800175e <HAL_RCC_GetSysClockFreq+0x3a>
 8001756:	e0db      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001758:	4b73      	ldr	r3, [pc, #460]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x204>)
 800175a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800175c:	e0db      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800175e:	4b73      	ldr	r3, [pc, #460]	@ (800192c <HAL_RCC_GetSysClockFreq+0x208>)
 8001760:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001762:	e0d8      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001764:	4b6f      	ldr	r3, [pc, #444]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800176c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800176e:	4b6d      	ldr	r3, [pc, #436]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d063      	beq.n	8001842 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177a:	4b6a      	ldr	r3, [pc, #424]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	099b      	lsrs	r3, r3, #6
 8001780:	2200      	movs	r2, #0
 8001782:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001784:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800178c:	633b      	str	r3, [r7, #48]	@ 0x30
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	@ 0x34
 8001792:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001796:	4622      	mov	r2, r4
 8001798:	462b      	mov	r3, r5
 800179a:	f04f 0000 	mov.w	r0, #0
 800179e:	f04f 0100 	mov.w	r1, #0
 80017a2:	0159      	lsls	r1, r3, #5
 80017a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017a8:	0150      	lsls	r0, r2, #5
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4621      	mov	r1, r4
 80017b0:	1a51      	subs	r1, r2, r1
 80017b2:	6139      	str	r1, [r7, #16]
 80017b4:	4629      	mov	r1, r5
 80017b6:	eb63 0301 	sbc.w	r3, r3, r1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017c8:	4659      	mov	r1, fp
 80017ca:	018b      	lsls	r3, r1, #6
 80017cc:	4651      	mov	r1, sl
 80017ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d2:	4651      	mov	r1, sl
 80017d4:	018a      	lsls	r2, r1, #6
 80017d6:	4651      	mov	r1, sl
 80017d8:	ebb2 0801 	subs.w	r8, r2, r1
 80017dc:	4659      	mov	r1, fp
 80017de:	eb63 0901 	sbc.w	r9, r3, r1
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017f6:	4690      	mov	r8, r2
 80017f8:	4699      	mov	r9, r3
 80017fa:	4623      	mov	r3, r4
 80017fc:	eb18 0303 	adds.w	r3, r8, r3
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	462b      	mov	r3, r5
 8001804:	eb49 0303 	adc.w	r3, r9, r3
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001816:	4629      	mov	r1, r5
 8001818:	024b      	lsls	r3, r1, #9
 800181a:	4621      	mov	r1, r4
 800181c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001820:	4621      	mov	r1, r4
 8001822:	024a      	lsls	r2, r1, #9
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800182a:	2200      	movs	r2, #0
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800182e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001830:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001834:	f7fe fd24 	bl	8000280 <__aeabi_uldivmod>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4613      	mov	r3, r2
 800183e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001840:	e058      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001842:	4b38      	ldr	r3, [pc, #224]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	099b      	lsrs	r3, r3, #6
 8001848:	2200      	movs	r2, #0
 800184a:	4618      	mov	r0, r3
 800184c:	4611      	mov	r1, r2
 800184e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001852:	623b      	str	r3, [r7, #32]
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
 8001858:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800185c:	4642      	mov	r2, r8
 800185e:	464b      	mov	r3, r9
 8001860:	f04f 0000 	mov.w	r0, #0
 8001864:	f04f 0100 	mov.w	r1, #0
 8001868:	0159      	lsls	r1, r3, #5
 800186a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800186e:	0150      	lsls	r0, r2, #5
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4641      	mov	r1, r8
 8001876:	ebb2 0a01 	subs.w	sl, r2, r1
 800187a:	4649      	mov	r1, r9
 800187c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800188c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001890:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001894:	ebb2 040a 	subs.w	r4, r2, sl
 8001898:	eb63 050b 	sbc.w	r5, r3, fp
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	00eb      	lsls	r3, r5, #3
 80018a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018aa:	00e2      	lsls	r2, r4, #3
 80018ac:	4614      	mov	r4, r2
 80018ae:	461d      	mov	r5, r3
 80018b0:	4643      	mov	r3, r8
 80018b2:	18e3      	adds	r3, r4, r3
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	464b      	mov	r3, r9
 80018b8:	eb45 0303 	adc.w	r3, r5, r3
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ca:	4629      	mov	r1, r5
 80018cc:	028b      	lsls	r3, r1, #10
 80018ce:	4621      	mov	r1, r4
 80018d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018d4:	4621      	mov	r1, r4
 80018d6:	028a      	lsls	r2, r1, #10
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018de:	2200      	movs	r2, #0
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	61fa      	str	r2, [r7, #28]
 80018e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018e8:	f7fe fcca 	bl	8000280 <__aeabi_uldivmod>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4613      	mov	r3, r2
 80018f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	3301      	adds	r3, #1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001904:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800190e:	e002      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001910:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x204>)
 8001912:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001918:	4618      	mov	r0, r3
 800191a:	3750      	adds	r7, #80	@ 0x50
 800191c:	46bd      	mov	sp, r7
 800191e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	00f42400 	.word	0x00f42400
 800192c:	007a1200 	.word	0x007a1200

08001930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001934:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <HAL_RCC_GetHCLKFreq+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000000 	.word	0x20000000

08001948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800194c:	f7ff fff0 	bl	8001930 <HAL_RCC_GetHCLKFreq>
 8001950:	4602      	mov	r2, r0
 8001952:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	0a9b      	lsrs	r3, r3, #10
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	4903      	ldr	r1, [pc, #12]	@ (800196c <HAL_RCC_GetPCLK1Freq+0x24>)
 800195e:	5ccb      	ldrb	r3, [r1, r3]
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	08002b38 	.word	0x08002b38

08001970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001974:	f7ff ffdc 	bl	8001930 <HAL_RCC_GetHCLKFreq>
 8001978:	4602      	mov	r2, r0
 800197a:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	0b5b      	lsrs	r3, r3, #13
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	4903      	ldr	r1, [pc, #12]	@ (8001994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	08002b38 	.word	0x08002b38

08001998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e042      	b.n	8001a30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d106      	bne.n	80019c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7fe ff4e 	bl	8000860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2224      	movs	r2, #36	@ 0x24
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f973 	bl	8001cc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	4613      	mov	r3, r2
 8001a46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d175      	bne.n	8001b44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_UART_Transmit+0x2c>
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e06e      	b.n	8001b46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2221      	movs	r2, #33	@ 0x21
 8001a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a76:	f7ff f843 	bl	8000b00 <HAL_GetTick>
 8001a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	88fa      	ldrh	r2, [r7, #6]
 8001a80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	88fa      	ldrh	r2, [r7, #6]
 8001a86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a90:	d108      	bne.n	8001aa4 <HAL_UART_Transmit+0x6c>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d104      	bne.n	8001aa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	e003      	b.n	8001aac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001aac:	e02e      	b.n	8001b0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2180      	movs	r1, #128	@ 0x80
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f848 	bl	8001b4e <UART_WaitOnFlagUntilTimeout>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e03a      	b.n	8001b46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10b      	bne.n	8001aee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ae4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	3302      	adds	r3, #2
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	e007      	b.n	8001afe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	781a      	ldrb	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	3301      	adds	r3, #1
 8001afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1cb      	bne.n	8001aae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2140      	movs	r1, #64	@ 0x40
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f814 	bl	8001b4e <UART_WaitOnFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e006      	b.n	8001b46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e000      	b.n	8001b46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
  }
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b5e:	e03b      	b.n	8001bd8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b66:	d037      	beq.n	8001bd8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b68:	f7fe ffca 	bl	8000b00 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	6a3a      	ldr	r2, [r7, #32]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d302      	bcc.n	8001b7e <UART_WaitOnFlagUntilTimeout+0x30>
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e03a      	b.n	8001bf8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d023      	beq.n	8001bd8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b80      	cmp	r3, #128	@ 0x80
 8001b94:	d020      	beq.n	8001bd8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b40      	cmp	r3, #64	@ 0x40
 8001b9a:	d01d      	beq.n	8001bd8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d116      	bne.n	8001bd8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 f81d 	bl	8001c00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e00f      	b.n	8001bf8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	4013      	ands	r3, r2
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	461a      	mov	r2, r3
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d0b4      	beq.n	8001b60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b095      	sub	sp, #84	@ 0x54
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	330c      	adds	r3, #12
 8001c0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c12:	e853 3f00 	ldrex	r3, [r3]
 8001c16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	330c      	adds	r3, #12
 8001c26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c28:	643a      	str	r2, [r7, #64]	@ 0x40
 8001c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c30:	e841 2300 	strex	r3, r2, [r1]
 8001c34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1e5      	bne.n	8001c08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3314      	adds	r3, #20
 8001c42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	e853 3f00 	ldrex	r3, [r3]
 8001c4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f023 0301 	bic.w	r3, r3, #1
 8001c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3314      	adds	r3, #20
 8001c5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c64:	e841 2300 	strex	r3, r2, [r1]
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e5      	bne.n	8001c3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d119      	bne.n	8001cac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	330c      	adds	r3, #12
 8001c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	e853 3f00 	ldrex	r3, [r3]
 8001c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f023 0310 	bic.w	r3, r3, #16
 8001c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	330c      	adds	r3, #12
 8001c96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c98:	61ba      	str	r2, [r7, #24]
 8001c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c9c:	6979      	ldr	r1, [r7, #20]
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	e841 2300 	strex	r3, r2, [r1]
 8001ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1e5      	bne.n	8001c78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001cba:	bf00      	nop
 8001cbc:	3754      	adds	r7, #84	@ 0x54
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ccc:	b0c0      	sub	sp, #256	@ 0x100
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ce4:	68d9      	ldr	r1, [r3, #12]
 8001ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	ea40 0301 	orr.w	r3, r0, r1
 8001cf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001d20:	f021 010c 	bic.w	r1, r1, #12
 8001d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d42:	6999      	ldr	r1, [r3, #24]
 8001d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	ea40 0301 	orr.w	r3, r0, r1
 8001d4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4b8f      	ldr	r3, [pc, #572]	@ (8001f94 <UART_SetConfig+0x2cc>)
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d005      	beq.n	8001d68 <UART_SetConfig+0xa0>
 8001d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4b8d      	ldr	r3, [pc, #564]	@ (8001f98 <UART_SetConfig+0x2d0>)
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d104      	bne.n	8001d72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d68:	f7ff fe02 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
 8001d6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001d70:	e003      	b.n	8001d7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d72:	f7ff fde9 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 8001d76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d84:	f040 810c 	bne.w	8001fa0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001d92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001d96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d9a:	4622      	mov	r2, r4
 8001d9c:	462b      	mov	r3, r5
 8001d9e:	1891      	adds	r1, r2, r2
 8001da0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001da2:	415b      	adcs	r3, r3
 8001da4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001da6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001daa:	4621      	mov	r1, r4
 8001dac:	eb12 0801 	adds.w	r8, r2, r1
 8001db0:	4629      	mov	r1, r5
 8001db2:	eb43 0901 	adc.w	r9, r3, r1
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dca:	4690      	mov	r8, r2
 8001dcc:	4699      	mov	r9, r3
 8001dce:	4623      	mov	r3, r4
 8001dd0:	eb18 0303 	adds.w	r3, r8, r3
 8001dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001dd8:	462b      	mov	r3, r5
 8001dda:	eb49 0303 	adc.w	r3, r9, r3
 8001dde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001dee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001df2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001df6:	460b      	mov	r3, r1
 8001df8:	18db      	adds	r3, r3, r3
 8001dfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	eb42 0303 	adc.w	r3, r2, r3
 8001e02:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e0c:	f7fe fa38 	bl	8000280 <__aeabi_uldivmod>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4b61      	ldr	r3, [pc, #388]	@ (8001f9c <UART_SetConfig+0x2d4>)
 8001e16:	fba3 2302 	umull	r2, r3, r3, r2
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	011c      	lsls	r4, r3, #4
 8001e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e22:	2200      	movs	r2, #0
 8001e24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001e30:	4642      	mov	r2, r8
 8001e32:	464b      	mov	r3, r9
 8001e34:	1891      	adds	r1, r2, r2
 8001e36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001e38:	415b      	adcs	r3, r3
 8001e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e40:	4641      	mov	r1, r8
 8001e42:	eb12 0a01 	adds.w	sl, r2, r1
 8001e46:	4649      	mov	r1, r9
 8001e48:	eb43 0b01 	adc.w	fp, r3, r1
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e60:	4692      	mov	sl, r2
 8001e62:	469b      	mov	fp, r3
 8001e64:	4643      	mov	r3, r8
 8001e66:	eb1a 0303 	adds.w	r3, sl, r3
 8001e6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001e6e:	464b      	mov	r3, r9
 8001e70:	eb4b 0303 	adc.w	r3, fp, r3
 8001e74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001e84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001e88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	18db      	adds	r3, r3, r3
 8001e90:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e92:	4613      	mov	r3, r2
 8001e94:	eb42 0303 	adc.w	r3, r2, r3
 8001e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001ea2:	f7fe f9ed 	bl	8000280 <__aeabi_uldivmod>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4b3b      	ldr	r3, [pc, #236]	@ (8001f9c <UART_SetConfig+0x2d4>)
 8001eae:	fba3 2301 	umull	r2, r3, r3, r1
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2264      	movs	r2, #100	@ 0x64
 8001eb6:	fb02 f303 	mul.w	r3, r2, r3
 8001eba:	1acb      	subs	r3, r1, r3
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001ec2:	4b36      	ldr	r3, [pc, #216]	@ (8001f9c <UART_SetConfig+0x2d4>)
 8001ec4:	fba3 2302 	umull	r2, r3, r3, r2
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001ed0:	441c      	add	r4, r3
 8001ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001edc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001ee0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001ee4:	4642      	mov	r2, r8
 8001ee6:	464b      	mov	r3, r9
 8001ee8:	1891      	adds	r1, r2, r2
 8001eea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001eec:	415b      	adcs	r3, r3
 8001eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ef0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ef4:	4641      	mov	r1, r8
 8001ef6:	1851      	adds	r1, r2, r1
 8001ef8:	6339      	str	r1, [r7, #48]	@ 0x30
 8001efa:	4649      	mov	r1, r9
 8001efc:	414b      	adcs	r3, r1
 8001efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001f0c:	4659      	mov	r1, fp
 8001f0e:	00cb      	lsls	r3, r1, #3
 8001f10:	4651      	mov	r1, sl
 8001f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f16:	4651      	mov	r1, sl
 8001f18:	00ca      	lsls	r2, r1, #3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4642      	mov	r2, r8
 8001f22:	189b      	adds	r3, r3, r2
 8001f24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f28:	464b      	mov	r3, r9
 8001f2a:	460a      	mov	r2, r1
 8001f2c:	eb42 0303 	adc.w	r3, r2, r3
 8001f30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001f40:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001f44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001f48:	460b      	mov	r3, r1
 8001f4a:	18db      	adds	r3, r3, r3
 8001f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f4e:	4613      	mov	r3, r2
 8001f50:	eb42 0303 	adc.w	r3, r2, r3
 8001f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001f5e:	f7fe f98f 	bl	8000280 <__aeabi_uldivmod>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4b0d      	ldr	r3, [pc, #52]	@ (8001f9c <UART_SetConfig+0x2d4>)
 8001f68:	fba3 1302 	umull	r1, r3, r3, r2
 8001f6c:	095b      	lsrs	r3, r3, #5
 8001f6e:	2164      	movs	r1, #100	@ 0x64
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	3332      	adds	r3, #50	@ 0x32
 8001f7a:	4a08      	ldr	r2, [pc, #32]	@ (8001f9c <UART_SetConfig+0x2d4>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	095b      	lsrs	r3, r3, #5
 8001f82:	f003 0207 	and.w	r2, r3, #7
 8001f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4422      	add	r2, r4
 8001f8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f90:	e106      	b.n	80021a0 <UART_SetConfig+0x4d8>
 8001f92:	bf00      	nop
 8001f94:	40011000 	.word	0x40011000
 8001f98:	40011400 	.word	0x40011400
 8001f9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001faa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001fae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001fb2:	4642      	mov	r2, r8
 8001fb4:	464b      	mov	r3, r9
 8001fb6:	1891      	adds	r1, r2, r2
 8001fb8:	6239      	str	r1, [r7, #32]
 8001fba:	415b      	adcs	r3, r3
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fc2:	4641      	mov	r1, r8
 8001fc4:	1854      	adds	r4, r2, r1
 8001fc6:	4649      	mov	r1, r9
 8001fc8:	eb43 0501 	adc.w	r5, r3, r1
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	00eb      	lsls	r3, r5, #3
 8001fd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fda:	00e2      	lsls	r2, r4, #3
 8001fdc:	4614      	mov	r4, r2
 8001fde:	461d      	mov	r5, r3
 8001fe0:	4643      	mov	r3, r8
 8001fe2:	18e3      	adds	r3, r4, r3
 8001fe4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001fe8:	464b      	mov	r3, r9
 8001fea:	eb45 0303 	adc.w	r3, r5, r3
 8001fee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ffe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800200e:	4629      	mov	r1, r5
 8002010:	008b      	lsls	r3, r1, #2
 8002012:	4621      	mov	r1, r4
 8002014:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002018:	4621      	mov	r1, r4
 800201a:	008a      	lsls	r2, r1, #2
 800201c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002020:	f7fe f92e 	bl	8000280 <__aeabi_uldivmod>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4b60      	ldr	r3, [pc, #384]	@ (80021ac <UART_SetConfig+0x4e4>)
 800202a:	fba3 2302 	umull	r2, r3, r3, r2
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	011c      	lsls	r4, r3, #4
 8002032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002036:	2200      	movs	r2, #0
 8002038:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800203c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002040:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002044:	4642      	mov	r2, r8
 8002046:	464b      	mov	r3, r9
 8002048:	1891      	adds	r1, r2, r2
 800204a:	61b9      	str	r1, [r7, #24]
 800204c:	415b      	adcs	r3, r3
 800204e:	61fb      	str	r3, [r7, #28]
 8002050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002054:	4641      	mov	r1, r8
 8002056:	1851      	adds	r1, r2, r1
 8002058:	6139      	str	r1, [r7, #16]
 800205a:	4649      	mov	r1, r9
 800205c:	414b      	adcs	r3, r1
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800206c:	4659      	mov	r1, fp
 800206e:	00cb      	lsls	r3, r1, #3
 8002070:	4651      	mov	r1, sl
 8002072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002076:	4651      	mov	r1, sl
 8002078:	00ca      	lsls	r2, r1, #3
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	4603      	mov	r3, r0
 8002080:	4642      	mov	r2, r8
 8002082:	189b      	adds	r3, r3, r2
 8002084:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002088:	464b      	mov	r3, r9
 800208a:	460a      	mov	r2, r1
 800208c:	eb42 0303 	adc.w	r3, r2, r3
 8002090:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800209e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80020ac:	4649      	mov	r1, r9
 80020ae:	008b      	lsls	r3, r1, #2
 80020b0:	4641      	mov	r1, r8
 80020b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020b6:	4641      	mov	r1, r8
 80020b8:	008a      	lsls	r2, r1, #2
 80020ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80020be:	f7fe f8df 	bl	8000280 <__aeabi_uldivmod>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4611      	mov	r1, r2
 80020c8:	4b38      	ldr	r3, [pc, #224]	@ (80021ac <UART_SetConfig+0x4e4>)
 80020ca:	fba3 2301 	umull	r2, r3, r3, r1
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2264      	movs	r2, #100	@ 0x64
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	1acb      	subs	r3, r1, r3
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	3332      	adds	r3, #50	@ 0x32
 80020dc:	4a33      	ldr	r2, [pc, #204]	@ (80021ac <UART_SetConfig+0x4e4>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020e8:	441c      	add	r4, r3
 80020ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020ee:	2200      	movs	r2, #0
 80020f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80020f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80020f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80020f8:	4642      	mov	r2, r8
 80020fa:	464b      	mov	r3, r9
 80020fc:	1891      	adds	r1, r2, r2
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	415b      	adcs	r3, r3
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002108:	4641      	mov	r1, r8
 800210a:	1851      	adds	r1, r2, r1
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	4649      	mov	r1, r9
 8002110:	414b      	adcs	r3, r1
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002120:	4659      	mov	r1, fp
 8002122:	00cb      	lsls	r3, r1, #3
 8002124:	4651      	mov	r1, sl
 8002126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800212a:	4651      	mov	r1, sl
 800212c:	00ca      	lsls	r2, r1, #3
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	4603      	mov	r3, r0
 8002134:	4642      	mov	r2, r8
 8002136:	189b      	adds	r3, r3, r2
 8002138:	66bb      	str	r3, [r7, #104]	@ 0x68
 800213a:	464b      	mov	r3, r9
 800213c:	460a      	mov	r2, r1
 800213e:	eb42 0303 	adc.w	r3, r2, r3
 8002142:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	663b      	str	r3, [r7, #96]	@ 0x60
 800214e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800215c:	4649      	mov	r1, r9
 800215e:	008b      	lsls	r3, r1, #2
 8002160:	4641      	mov	r1, r8
 8002162:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002166:	4641      	mov	r1, r8
 8002168:	008a      	lsls	r2, r1, #2
 800216a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800216e:	f7fe f887 	bl	8000280 <__aeabi_uldivmod>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4b0d      	ldr	r3, [pc, #52]	@ (80021ac <UART_SetConfig+0x4e4>)
 8002178:	fba3 1302 	umull	r1, r3, r3, r2
 800217c:	095b      	lsrs	r3, r3, #5
 800217e:	2164      	movs	r1, #100	@ 0x64
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	3332      	adds	r3, #50	@ 0x32
 800218a:	4a08      	ldr	r2, [pc, #32]	@ (80021ac <UART_SetConfig+0x4e4>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	f003 020f 	and.w	r2, r3, #15
 8002196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4422      	add	r2, r4
 800219e:	609a      	str	r2, [r3, #8]
}
 80021a0:	bf00      	nop
 80021a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80021a6:	46bd      	mov	sp, r7
 80021a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ac:	51eb851f 	.word	0x51eb851f

080021b0 <siprintf>:
 80021b0:	b40e      	push	{r1, r2, r3}
 80021b2:	b500      	push	{lr}
 80021b4:	b09c      	sub	sp, #112	@ 0x70
 80021b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80021b8:	9002      	str	r0, [sp, #8]
 80021ba:	9006      	str	r0, [sp, #24]
 80021bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80021c0:	4809      	ldr	r0, [pc, #36]	@ (80021e8 <siprintf+0x38>)
 80021c2:	9107      	str	r1, [sp, #28]
 80021c4:	9104      	str	r1, [sp, #16]
 80021c6:	4909      	ldr	r1, [pc, #36]	@ (80021ec <siprintf+0x3c>)
 80021c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80021cc:	9105      	str	r1, [sp, #20]
 80021ce:	6800      	ldr	r0, [r0, #0]
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	a902      	add	r1, sp, #8
 80021d4:	f000 f994 	bl	8002500 <_svfiprintf_r>
 80021d8:	9b02      	ldr	r3, [sp, #8]
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	b01c      	add	sp, #112	@ 0x70
 80021e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80021e4:	b003      	add	sp, #12
 80021e6:	4770      	bx	lr
 80021e8:	2000000c 	.word	0x2000000c
 80021ec:	ffff0208 	.word	0xffff0208

080021f0 <memset>:
 80021f0:	4402      	add	r2, r0
 80021f2:	4603      	mov	r3, r0
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d100      	bne.n	80021fa <memset+0xa>
 80021f8:	4770      	bx	lr
 80021fa:	f803 1b01 	strb.w	r1, [r3], #1
 80021fe:	e7f9      	b.n	80021f4 <memset+0x4>

08002200 <__errno>:
 8002200:	4b01      	ldr	r3, [pc, #4]	@ (8002208 <__errno+0x8>)
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	2000000c 	.word	0x2000000c

0800220c <__libc_init_array>:
 800220c:	b570      	push	{r4, r5, r6, lr}
 800220e:	4d0d      	ldr	r5, [pc, #52]	@ (8002244 <__libc_init_array+0x38>)
 8002210:	4c0d      	ldr	r4, [pc, #52]	@ (8002248 <__libc_init_array+0x3c>)
 8002212:	1b64      	subs	r4, r4, r5
 8002214:	10a4      	asrs	r4, r4, #2
 8002216:	2600      	movs	r6, #0
 8002218:	42a6      	cmp	r6, r4
 800221a:	d109      	bne.n	8002230 <__libc_init_array+0x24>
 800221c:	4d0b      	ldr	r5, [pc, #44]	@ (800224c <__libc_init_array+0x40>)
 800221e:	4c0c      	ldr	r4, [pc, #48]	@ (8002250 <__libc_init_array+0x44>)
 8002220:	f000 fc66 	bl	8002af0 <_init>
 8002224:	1b64      	subs	r4, r4, r5
 8002226:	10a4      	asrs	r4, r4, #2
 8002228:	2600      	movs	r6, #0
 800222a:	42a6      	cmp	r6, r4
 800222c:	d105      	bne.n	800223a <__libc_init_array+0x2e>
 800222e:	bd70      	pop	{r4, r5, r6, pc}
 8002230:	f855 3b04 	ldr.w	r3, [r5], #4
 8002234:	4798      	blx	r3
 8002236:	3601      	adds	r6, #1
 8002238:	e7ee      	b.n	8002218 <__libc_init_array+0xc>
 800223a:	f855 3b04 	ldr.w	r3, [r5], #4
 800223e:	4798      	blx	r3
 8002240:	3601      	adds	r6, #1
 8002242:	e7f2      	b.n	800222a <__libc_init_array+0x1e>
 8002244:	08002b7c 	.word	0x08002b7c
 8002248:	08002b7c 	.word	0x08002b7c
 800224c:	08002b7c 	.word	0x08002b7c
 8002250:	08002b80 	.word	0x08002b80

08002254 <__retarget_lock_acquire_recursive>:
 8002254:	4770      	bx	lr

08002256 <__retarget_lock_release_recursive>:
 8002256:	4770      	bx	lr

08002258 <_free_r>:
 8002258:	b538      	push	{r3, r4, r5, lr}
 800225a:	4605      	mov	r5, r0
 800225c:	2900      	cmp	r1, #0
 800225e:	d041      	beq.n	80022e4 <_free_r+0x8c>
 8002260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002264:	1f0c      	subs	r4, r1, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	bfb8      	it	lt
 800226a:	18e4      	addlt	r4, r4, r3
 800226c:	f000 f8e0 	bl	8002430 <__malloc_lock>
 8002270:	4a1d      	ldr	r2, [pc, #116]	@ (80022e8 <_free_r+0x90>)
 8002272:	6813      	ldr	r3, [r2, #0]
 8002274:	b933      	cbnz	r3, 8002284 <_free_r+0x2c>
 8002276:	6063      	str	r3, [r4, #4]
 8002278:	6014      	str	r4, [r2, #0]
 800227a:	4628      	mov	r0, r5
 800227c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002280:	f000 b8dc 	b.w	800243c <__malloc_unlock>
 8002284:	42a3      	cmp	r3, r4
 8002286:	d908      	bls.n	800229a <_free_r+0x42>
 8002288:	6820      	ldr	r0, [r4, #0]
 800228a:	1821      	adds	r1, r4, r0
 800228c:	428b      	cmp	r3, r1
 800228e:	bf01      	itttt	eq
 8002290:	6819      	ldreq	r1, [r3, #0]
 8002292:	685b      	ldreq	r3, [r3, #4]
 8002294:	1809      	addeq	r1, r1, r0
 8002296:	6021      	streq	r1, [r4, #0]
 8002298:	e7ed      	b.n	8002276 <_free_r+0x1e>
 800229a:	461a      	mov	r2, r3
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	b10b      	cbz	r3, 80022a4 <_free_r+0x4c>
 80022a0:	42a3      	cmp	r3, r4
 80022a2:	d9fa      	bls.n	800229a <_free_r+0x42>
 80022a4:	6811      	ldr	r1, [r2, #0]
 80022a6:	1850      	adds	r0, r2, r1
 80022a8:	42a0      	cmp	r0, r4
 80022aa:	d10b      	bne.n	80022c4 <_free_r+0x6c>
 80022ac:	6820      	ldr	r0, [r4, #0]
 80022ae:	4401      	add	r1, r0
 80022b0:	1850      	adds	r0, r2, r1
 80022b2:	4283      	cmp	r3, r0
 80022b4:	6011      	str	r1, [r2, #0]
 80022b6:	d1e0      	bne.n	800227a <_free_r+0x22>
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	6053      	str	r3, [r2, #4]
 80022be:	4408      	add	r0, r1
 80022c0:	6010      	str	r0, [r2, #0]
 80022c2:	e7da      	b.n	800227a <_free_r+0x22>
 80022c4:	d902      	bls.n	80022cc <_free_r+0x74>
 80022c6:	230c      	movs	r3, #12
 80022c8:	602b      	str	r3, [r5, #0]
 80022ca:	e7d6      	b.n	800227a <_free_r+0x22>
 80022cc:	6820      	ldr	r0, [r4, #0]
 80022ce:	1821      	adds	r1, r4, r0
 80022d0:	428b      	cmp	r3, r1
 80022d2:	bf04      	itt	eq
 80022d4:	6819      	ldreq	r1, [r3, #0]
 80022d6:	685b      	ldreq	r3, [r3, #4]
 80022d8:	6063      	str	r3, [r4, #4]
 80022da:	bf04      	itt	eq
 80022dc:	1809      	addeq	r1, r1, r0
 80022de:	6021      	streq	r1, [r4, #0]
 80022e0:	6054      	str	r4, [r2, #4]
 80022e2:	e7ca      	b.n	800227a <_free_r+0x22>
 80022e4:	bd38      	pop	{r3, r4, r5, pc}
 80022e6:	bf00      	nop
 80022e8:	2000020c 	.word	0x2000020c

080022ec <sbrk_aligned>:
 80022ec:	b570      	push	{r4, r5, r6, lr}
 80022ee:	4e0f      	ldr	r6, [pc, #60]	@ (800232c <sbrk_aligned+0x40>)
 80022f0:	460c      	mov	r4, r1
 80022f2:	6831      	ldr	r1, [r6, #0]
 80022f4:	4605      	mov	r5, r0
 80022f6:	b911      	cbnz	r1, 80022fe <sbrk_aligned+0x12>
 80022f8:	f000 fba6 	bl	8002a48 <_sbrk_r>
 80022fc:	6030      	str	r0, [r6, #0]
 80022fe:	4621      	mov	r1, r4
 8002300:	4628      	mov	r0, r5
 8002302:	f000 fba1 	bl	8002a48 <_sbrk_r>
 8002306:	1c43      	adds	r3, r0, #1
 8002308:	d103      	bne.n	8002312 <sbrk_aligned+0x26>
 800230a:	f04f 34ff 	mov.w	r4, #4294967295
 800230e:	4620      	mov	r0, r4
 8002310:	bd70      	pop	{r4, r5, r6, pc}
 8002312:	1cc4      	adds	r4, r0, #3
 8002314:	f024 0403 	bic.w	r4, r4, #3
 8002318:	42a0      	cmp	r0, r4
 800231a:	d0f8      	beq.n	800230e <sbrk_aligned+0x22>
 800231c:	1a21      	subs	r1, r4, r0
 800231e:	4628      	mov	r0, r5
 8002320:	f000 fb92 	bl	8002a48 <_sbrk_r>
 8002324:	3001      	adds	r0, #1
 8002326:	d1f2      	bne.n	800230e <sbrk_aligned+0x22>
 8002328:	e7ef      	b.n	800230a <sbrk_aligned+0x1e>
 800232a:	bf00      	nop
 800232c:	20000208 	.word	0x20000208

08002330 <_malloc_r>:
 8002330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002334:	1ccd      	adds	r5, r1, #3
 8002336:	f025 0503 	bic.w	r5, r5, #3
 800233a:	3508      	adds	r5, #8
 800233c:	2d0c      	cmp	r5, #12
 800233e:	bf38      	it	cc
 8002340:	250c      	movcc	r5, #12
 8002342:	2d00      	cmp	r5, #0
 8002344:	4606      	mov	r6, r0
 8002346:	db01      	blt.n	800234c <_malloc_r+0x1c>
 8002348:	42a9      	cmp	r1, r5
 800234a:	d904      	bls.n	8002356 <_malloc_r+0x26>
 800234c:	230c      	movs	r3, #12
 800234e:	6033      	str	r3, [r6, #0]
 8002350:	2000      	movs	r0, #0
 8002352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002356:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800242c <_malloc_r+0xfc>
 800235a:	f000 f869 	bl	8002430 <__malloc_lock>
 800235e:	f8d8 3000 	ldr.w	r3, [r8]
 8002362:	461c      	mov	r4, r3
 8002364:	bb44      	cbnz	r4, 80023b8 <_malloc_r+0x88>
 8002366:	4629      	mov	r1, r5
 8002368:	4630      	mov	r0, r6
 800236a:	f7ff ffbf 	bl	80022ec <sbrk_aligned>
 800236e:	1c43      	adds	r3, r0, #1
 8002370:	4604      	mov	r4, r0
 8002372:	d158      	bne.n	8002426 <_malloc_r+0xf6>
 8002374:	f8d8 4000 	ldr.w	r4, [r8]
 8002378:	4627      	mov	r7, r4
 800237a:	2f00      	cmp	r7, #0
 800237c:	d143      	bne.n	8002406 <_malloc_r+0xd6>
 800237e:	2c00      	cmp	r4, #0
 8002380:	d04b      	beq.n	800241a <_malloc_r+0xea>
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	4639      	mov	r1, r7
 8002386:	4630      	mov	r0, r6
 8002388:	eb04 0903 	add.w	r9, r4, r3
 800238c:	f000 fb5c 	bl	8002a48 <_sbrk_r>
 8002390:	4581      	cmp	r9, r0
 8002392:	d142      	bne.n	800241a <_malloc_r+0xea>
 8002394:	6821      	ldr	r1, [r4, #0]
 8002396:	1a6d      	subs	r5, r5, r1
 8002398:	4629      	mov	r1, r5
 800239a:	4630      	mov	r0, r6
 800239c:	f7ff ffa6 	bl	80022ec <sbrk_aligned>
 80023a0:	3001      	adds	r0, #1
 80023a2:	d03a      	beq.n	800241a <_malloc_r+0xea>
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	442b      	add	r3, r5
 80023a8:	6023      	str	r3, [r4, #0]
 80023aa:	f8d8 3000 	ldr.w	r3, [r8]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	bb62      	cbnz	r2, 800240c <_malloc_r+0xdc>
 80023b2:	f8c8 7000 	str.w	r7, [r8]
 80023b6:	e00f      	b.n	80023d8 <_malloc_r+0xa8>
 80023b8:	6822      	ldr	r2, [r4, #0]
 80023ba:	1b52      	subs	r2, r2, r5
 80023bc:	d420      	bmi.n	8002400 <_malloc_r+0xd0>
 80023be:	2a0b      	cmp	r2, #11
 80023c0:	d917      	bls.n	80023f2 <_malloc_r+0xc2>
 80023c2:	1961      	adds	r1, r4, r5
 80023c4:	42a3      	cmp	r3, r4
 80023c6:	6025      	str	r5, [r4, #0]
 80023c8:	bf18      	it	ne
 80023ca:	6059      	strne	r1, [r3, #4]
 80023cc:	6863      	ldr	r3, [r4, #4]
 80023ce:	bf08      	it	eq
 80023d0:	f8c8 1000 	streq.w	r1, [r8]
 80023d4:	5162      	str	r2, [r4, r5]
 80023d6:	604b      	str	r3, [r1, #4]
 80023d8:	4630      	mov	r0, r6
 80023da:	f000 f82f 	bl	800243c <__malloc_unlock>
 80023de:	f104 000b 	add.w	r0, r4, #11
 80023e2:	1d23      	adds	r3, r4, #4
 80023e4:	f020 0007 	bic.w	r0, r0, #7
 80023e8:	1ac2      	subs	r2, r0, r3
 80023ea:	bf1c      	itt	ne
 80023ec:	1a1b      	subne	r3, r3, r0
 80023ee:	50a3      	strne	r3, [r4, r2]
 80023f0:	e7af      	b.n	8002352 <_malloc_r+0x22>
 80023f2:	6862      	ldr	r2, [r4, #4]
 80023f4:	42a3      	cmp	r3, r4
 80023f6:	bf0c      	ite	eq
 80023f8:	f8c8 2000 	streq.w	r2, [r8]
 80023fc:	605a      	strne	r2, [r3, #4]
 80023fe:	e7eb      	b.n	80023d8 <_malloc_r+0xa8>
 8002400:	4623      	mov	r3, r4
 8002402:	6864      	ldr	r4, [r4, #4]
 8002404:	e7ae      	b.n	8002364 <_malloc_r+0x34>
 8002406:	463c      	mov	r4, r7
 8002408:	687f      	ldr	r7, [r7, #4]
 800240a:	e7b6      	b.n	800237a <_malloc_r+0x4a>
 800240c:	461a      	mov	r2, r3
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	42a3      	cmp	r3, r4
 8002412:	d1fb      	bne.n	800240c <_malloc_r+0xdc>
 8002414:	2300      	movs	r3, #0
 8002416:	6053      	str	r3, [r2, #4]
 8002418:	e7de      	b.n	80023d8 <_malloc_r+0xa8>
 800241a:	230c      	movs	r3, #12
 800241c:	6033      	str	r3, [r6, #0]
 800241e:	4630      	mov	r0, r6
 8002420:	f000 f80c 	bl	800243c <__malloc_unlock>
 8002424:	e794      	b.n	8002350 <_malloc_r+0x20>
 8002426:	6005      	str	r5, [r0, #0]
 8002428:	e7d6      	b.n	80023d8 <_malloc_r+0xa8>
 800242a:	bf00      	nop
 800242c:	2000020c 	.word	0x2000020c

08002430 <__malloc_lock>:
 8002430:	4801      	ldr	r0, [pc, #4]	@ (8002438 <__malloc_lock+0x8>)
 8002432:	f7ff bf0f 	b.w	8002254 <__retarget_lock_acquire_recursive>
 8002436:	bf00      	nop
 8002438:	20000204 	.word	0x20000204

0800243c <__malloc_unlock>:
 800243c:	4801      	ldr	r0, [pc, #4]	@ (8002444 <__malloc_unlock+0x8>)
 800243e:	f7ff bf0a 	b.w	8002256 <__retarget_lock_release_recursive>
 8002442:	bf00      	nop
 8002444:	20000204 	.word	0x20000204

08002448 <__ssputs_r>:
 8002448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800244c:	688e      	ldr	r6, [r1, #8]
 800244e:	461f      	mov	r7, r3
 8002450:	42be      	cmp	r6, r7
 8002452:	680b      	ldr	r3, [r1, #0]
 8002454:	4682      	mov	sl, r0
 8002456:	460c      	mov	r4, r1
 8002458:	4690      	mov	r8, r2
 800245a:	d82d      	bhi.n	80024b8 <__ssputs_r+0x70>
 800245c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002460:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002464:	d026      	beq.n	80024b4 <__ssputs_r+0x6c>
 8002466:	6965      	ldr	r5, [r4, #20]
 8002468:	6909      	ldr	r1, [r1, #16]
 800246a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800246e:	eba3 0901 	sub.w	r9, r3, r1
 8002472:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002476:	1c7b      	adds	r3, r7, #1
 8002478:	444b      	add	r3, r9
 800247a:	106d      	asrs	r5, r5, #1
 800247c:	429d      	cmp	r5, r3
 800247e:	bf38      	it	cc
 8002480:	461d      	movcc	r5, r3
 8002482:	0553      	lsls	r3, r2, #21
 8002484:	d527      	bpl.n	80024d6 <__ssputs_r+0x8e>
 8002486:	4629      	mov	r1, r5
 8002488:	f7ff ff52 	bl	8002330 <_malloc_r>
 800248c:	4606      	mov	r6, r0
 800248e:	b360      	cbz	r0, 80024ea <__ssputs_r+0xa2>
 8002490:	6921      	ldr	r1, [r4, #16]
 8002492:	464a      	mov	r2, r9
 8002494:	f000 fae8 	bl	8002a68 <memcpy>
 8002498:	89a3      	ldrh	r3, [r4, #12]
 800249a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800249e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024a2:	81a3      	strh	r3, [r4, #12]
 80024a4:	6126      	str	r6, [r4, #16]
 80024a6:	6165      	str	r5, [r4, #20]
 80024a8:	444e      	add	r6, r9
 80024aa:	eba5 0509 	sub.w	r5, r5, r9
 80024ae:	6026      	str	r6, [r4, #0]
 80024b0:	60a5      	str	r5, [r4, #8]
 80024b2:	463e      	mov	r6, r7
 80024b4:	42be      	cmp	r6, r7
 80024b6:	d900      	bls.n	80024ba <__ssputs_r+0x72>
 80024b8:	463e      	mov	r6, r7
 80024ba:	6820      	ldr	r0, [r4, #0]
 80024bc:	4632      	mov	r2, r6
 80024be:	4641      	mov	r1, r8
 80024c0:	f000 faa8 	bl	8002a14 <memmove>
 80024c4:	68a3      	ldr	r3, [r4, #8]
 80024c6:	1b9b      	subs	r3, r3, r6
 80024c8:	60a3      	str	r3, [r4, #8]
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	4433      	add	r3, r6
 80024ce:	6023      	str	r3, [r4, #0]
 80024d0:	2000      	movs	r0, #0
 80024d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024d6:	462a      	mov	r2, r5
 80024d8:	f000 fad4 	bl	8002a84 <_realloc_r>
 80024dc:	4606      	mov	r6, r0
 80024de:	2800      	cmp	r0, #0
 80024e0:	d1e0      	bne.n	80024a4 <__ssputs_r+0x5c>
 80024e2:	6921      	ldr	r1, [r4, #16]
 80024e4:	4650      	mov	r0, sl
 80024e6:	f7ff feb7 	bl	8002258 <_free_r>
 80024ea:	230c      	movs	r3, #12
 80024ec:	f8ca 3000 	str.w	r3, [sl]
 80024f0:	89a3      	ldrh	r3, [r4, #12]
 80024f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024f6:	81a3      	strh	r3, [r4, #12]
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	e7e9      	b.n	80024d2 <__ssputs_r+0x8a>
	...

08002500 <_svfiprintf_r>:
 8002500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002504:	4698      	mov	r8, r3
 8002506:	898b      	ldrh	r3, [r1, #12]
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	b09d      	sub	sp, #116	@ 0x74
 800250c:	4607      	mov	r7, r0
 800250e:	460d      	mov	r5, r1
 8002510:	4614      	mov	r4, r2
 8002512:	d510      	bpl.n	8002536 <_svfiprintf_r+0x36>
 8002514:	690b      	ldr	r3, [r1, #16]
 8002516:	b973      	cbnz	r3, 8002536 <_svfiprintf_r+0x36>
 8002518:	2140      	movs	r1, #64	@ 0x40
 800251a:	f7ff ff09 	bl	8002330 <_malloc_r>
 800251e:	6028      	str	r0, [r5, #0]
 8002520:	6128      	str	r0, [r5, #16]
 8002522:	b930      	cbnz	r0, 8002532 <_svfiprintf_r+0x32>
 8002524:	230c      	movs	r3, #12
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	b01d      	add	sp, #116	@ 0x74
 800252e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002532:	2340      	movs	r3, #64	@ 0x40
 8002534:	616b      	str	r3, [r5, #20]
 8002536:	2300      	movs	r3, #0
 8002538:	9309      	str	r3, [sp, #36]	@ 0x24
 800253a:	2320      	movs	r3, #32
 800253c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002540:	f8cd 800c 	str.w	r8, [sp, #12]
 8002544:	2330      	movs	r3, #48	@ 0x30
 8002546:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80026e4 <_svfiprintf_r+0x1e4>
 800254a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800254e:	f04f 0901 	mov.w	r9, #1
 8002552:	4623      	mov	r3, r4
 8002554:	469a      	mov	sl, r3
 8002556:	f813 2b01 	ldrb.w	r2, [r3], #1
 800255a:	b10a      	cbz	r2, 8002560 <_svfiprintf_r+0x60>
 800255c:	2a25      	cmp	r2, #37	@ 0x25
 800255e:	d1f9      	bne.n	8002554 <_svfiprintf_r+0x54>
 8002560:	ebba 0b04 	subs.w	fp, sl, r4
 8002564:	d00b      	beq.n	800257e <_svfiprintf_r+0x7e>
 8002566:	465b      	mov	r3, fp
 8002568:	4622      	mov	r2, r4
 800256a:	4629      	mov	r1, r5
 800256c:	4638      	mov	r0, r7
 800256e:	f7ff ff6b 	bl	8002448 <__ssputs_r>
 8002572:	3001      	adds	r0, #1
 8002574:	f000 80a7 	beq.w	80026c6 <_svfiprintf_r+0x1c6>
 8002578:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800257a:	445a      	add	r2, fp
 800257c:	9209      	str	r2, [sp, #36]	@ 0x24
 800257e:	f89a 3000 	ldrb.w	r3, [sl]
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 809f 	beq.w	80026c6 <_svfiprintf_r+0x1c6>
 8002588:	2300      	movs	r3, #0
 800258a:	f04f 32ff 	mov.w	r2, #4294967295
 800258e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002592:	f10a 0a01 	add.w	sl, sl, #1
 8002596:	9304      	str	r3, [sp, #16]
 8002598:	9307      	str	r3, [sp, #28]
 800259a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800259e:	931a      	str	r3, [sp, #104]	@ 0x68
 80025a0:	4654      	mov	r4, sl
 80025a2:	2205      	movs	r2, #5
 80025a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025a8:	484e      	ldr	r0, [pc, #312]	@ (80026e4 <_svfiprintf_r+0x1e4>)
 80025aa:	f7fd fe19 	bl	80001e0 <memchr>
 80025ae:	9a04      	ldr	r2, [sp, #16]
 80025b0:	b9d8      	cbnz	r0, 80025ea <_svfiprintf_r+0xea>
 80025b2:	06d0      	lsls	r0, r2, #27
 80025b4:	bf44      	itt	mi
 80025b6:	2320      	movmi	r3, #32
 80025b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80025bc:	0711      	lsls	r1, r2, #28
 80025be:	bf44      	itt	mi
 80025c0:	232b      	movmi	r3, #43	@ 0x2b
 80025c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80025c6:	f89a 3000 	ldrb.w	r3, [sl]
 80025ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80025cc:	d015      	beq.n	80025fa <_svfiprintf_r+0xfa>
 80025ce:	9a07      	ldr	r2, [sp, #28]
 80025d0:	4654      	mov	r4, sl
 80025d2:	2000      	movs	r0, #0
 80025d4:	f04f 0c0a 	mov.w	ip, #10
 80025d8:	4621      	mov	r1, r4
 80025da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025de:	3b30      	subs	r3, #48	@ 0x30
 80025e0:	2b09      	cmp	r3, #9
 80025e2:	d94b      	bls.n	800267c <_svfiprintf_r+0x17c>
 80025e4:	b1b0      	cbz	r0, 8002614 <_svfiprintf_r+0x114>
 80025e6:	9207      	str	r2, [sp, #28]
 80025e8:	e014      	b.n	8002614 <_svfiprintf_r+0x114>
 80025ea:	eba0 0308 	sub.w	r3, r0, r8
 80025ee:	fa09 f303 	lsl.w	r3, r9, r3
 80025f2:	4313      	orrs	r3, r2
 80025f4:	9304      	str	r3, [sp, #16]
 80025f6:	46a2      	mov	sl, r4
 80025f8:	e7d2      	b.n	80025a0 <_svfiprintf_r+0xa0>
 80025fa:	9b03      	ldr	r3, [sp, #12]
 80025fc:	1d19      	adds	r1, r3, #4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	9103      	str	r1, [sp, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	bfbb      	ittet	lt
 8002606:	425b      	neglt	r3, r3
 8002608:	f042 0202 	orrlt.w	r2, r2, #2
 800260c:	9307      	strge	r3, [sp, #28]
 800260e:	9307      	strlt	r3, [sp, #28]
 8002610:	bfb8      	it	lt
 8002612:	9204      	strlt	r2, [sp, #16]
 8002614:	7823      	ldrb	r3, [r4, #0]
 8002616:	2b2e      	cmp	r3, #46	@ 0x2e
 8002618:	d10a      	bne.n	8002630 <_svfiprintf_r+0x130>
 800261a:	7863      	ldrb	r3, [r4, #1]
 800261c:	2b2a      	cmp	r3, #42	@ 0x2a
 800261e:	d132      	bne.n	8002686 <_svfiprintf_r+0x186>
 8002620:	9b03      	ldr	r3, [sp, #12]
 8002622:	1d1a      	adds	r2, r3, #4
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	9203      	str	r2, [sp, #12]
 8002628:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800262c:	3402      	adds	r4, #2
 800262e:	9305      	str	r3, [sp, #20]
 8002630:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80026f4 <_svfiprintf_r+0x1f4>
 8002634:	7821      	ldrb	r1, [r4, #0]
 8002636:	2203      	movs	r2, #3
 8002638:	4650      	mov	r0, sl
 800263a:	f7fd fdd1 	bl	80001e0 <memchr>
 800263e:	b138      	cbz	r0, 8002650 <_svfiprintf_r+0x150>
 8002640:	9b04      	ldr	r3, [sp, #16]
 8002642:	eba0 000a 	sub.w	r0, r0, sl
 8002646:	2240      	movs	r2, #64	@ 0x40
 8002648:	4082      	lsls	r2, r0
 800264a:	4313      	orrs	r3, r2
 800264c:	3401      	adds	r4, #1
 800264e:	9304      	str	r3, [sp, #16]
 8002650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002654:	4824      	ldr	r0, [pc, #144]	@ (80026e8 <_svfiprintf_r+0x1e8>)
 8002656:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800265a:	2206      	movs	r2, #6
 800265c:	f7fd fdc0 	bl	80001e0 <memchr>
 8002660:	2800      	cmp	r0, #0
 8002662:	d036      	beq.n	80026d2 <_svfiprintf_r+0x1d2>
 8002664:	4b21      	ldr	r3, [pc, #132]	@ (80026ec <_svfiprintf_r+0x1ec>)
 8002666:	bb1b      	cbnz	r3, 80026b0 <_svfiprintf_r+0x1b0>
 8002668:	9b03      	ldr	r3, [sp, #12]
 800266a:	3307      	adds	r3, #7
 800266c:	f023 0307 	bic.w	r3, r3, #7
 8002670:	3308      	adds	r3, #8
 8002672:	9303      	str	r3, [sp, #12]
 8002674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002676:	4433      	add	r3, r6
 8002678:	9309      	str	r3, [sp, #36]	@ 0x24
 800267a:	e76a      	b.n	8002552 <_svfiprintf_r+0x52>
 800267c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002680:	460c      	mov	r4, r1
 8002682:	2001      	movs	r0, #1
 8002684:	e7a8      	b.n	80025d8 <_svfiprintf_r+0xd8>
 8002686:	2300      	movs	r3, #0
 8002688:	3401      	adds	r4, #1
 800268a:	9305      	str	r3, [sp, #20]
 800268c:	4619      	mov	r1, r3
 800268e:	f04f 0c0a 	mov.w	ip, #10
 8002692:	4620      	mov	r0, r4
 8002694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002698:	3a30      	subs	r2, #48	@ 0x30
 800269a:	2a09      	cmp	r2, #9
 800269c:	d903      	bls.n	80026a6 <_svfiprintf_r+0x1a6>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0c6      	beq.n	8002630 <_svfiprintf_r+0x130>
 80026a2:	9105      	str	r1, [sp, #20]
 80026a4:	e7c4      	b.n	8002630 <_svfiprintf_r+0x130>
 80026a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80026aa:	4604      	mov	r4, r0
 80026ac:	2301      	movs	r3, #1
 80026ae:	e7f0      	b.n	8002692 <_svfiprintf_r+0x192>
 80026b0:	ab03      	add	r3, sp, #12
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	462a      	mov	r2, r5
 80026b6:	4b0e      	ldr	r3, [pc, #56]	@ (80026f0 <_svfiprintf_r+0x1f0>)
 80026b8:	a904      	add	r1, sp, #16
 80026ba:	4638      	mov	r0, r7
 80026bc:	f3af 8000 	nop.w
 80026c0:	1c42      	adds	r2, r0, #1
 80026c2:	4606      	mov	r6, r0
 80026c4:	d1d6      	bne.n	8002674 <_svfiprintf_r+0x174>
 80026c6:	89ab      	ldrh	r3, [r5, #12]
 80026c8:	065b      	lsls	r3, r3, #25
 80026ca:	f53f af2d 	bmi.w	8002528 <_svfiprintf_r+0x28>
 80026ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80026d0:	e72c      	b.n	800252c <_svfiprintf_r+0x2c>
 80026d2:	ab03      	add	r3, sp, #12
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	462a      	mov	r2, r5
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <_svfiprintf_r+0x1f0>)
 80026da:	a904      	add	r1, sp, #16
 80026dc:	4638      	mov	r0, r7
 80026de:	f000 f879 	bl	80027d4 <_printf_i>
 80026e2:	e7ed      	b.n	80026c0 <_svfiprintf_r+0x1c0>
 80026e4:	08002b40 	.word	0x08002b40
 80026e8:	08002b4a 	.word	0x08002b4a
 80026ec:	00000000 	.word	0x00000000
 80026f0:	08002449 	.word	0x08002449
 80026f4:	08002b46 	.word	0x08002b46

080026f8 <_printf_common>:
 80026f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026fc:	4616      	mov	r6, r2
 80026fe:	4698      	mov	r8, r3
 8002700:	688a      	ldr	r2, [r1, #8]
 8002702:	690b      	ldr	r3, [r1, #16]
 8002704:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002708:	4293      	cmp	r3, r2
 800270a:	bfb8      	it	lt
 800270c:	4613      	movlt	r3, r2
 800270e:	6033      	str	r3, [r6, #0]
 8002710:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002714:	4607      	mov	r7, r0
 8002716:	460c      	mov	r4, r1
 8002718:	b10a      	cbz	r2, 800271e <_printf_common+0x26>
 800271a:	3301      	adds	r3, #1
 800271c:	6033      	str	r3, [r6, #0]
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	0699      	lsls	r1, r3, #26
 8002722:	bf42      	ittt	mi
 8002724:	6833      	ldrmi	r3, [r6, #0]
 8002726:	3302      	addmi	r3, #2
 8002728:	6033      	strmi	r3, [r6, #0]
 800272a:	6825      	ldr	r5, [r4, #0]
 800272c:	f015 0506 	ands.w	r5, r5, #6
 8002730:	d106      	bne.n	8002740 <_printf_common+0x48>
 8002732:	f104 0a19 	add.w	sl, r4, #25
 8002736:	68e3      	ldr	r3, [r4, #12]
 8002738:	6832      	ldr	r2, [r6, #0]
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	42ab      	cmp	r3, r5
 800273e:	dc26      	bgt.n	800278e <_printf_common+0x96>
 8002740:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002744:	6822      	ldr	r2, [r4, #0]
 8002746:	3b00      	subs	r3, #0
 8002748:	bf18      	it	ne
 800274a:	2301      	movne	r3, #1
 800274c:	0692      	lsls	r2, r2, #26
 800274e:	d42b      	bmi.n	80027a8 <_printf_common+0xb0>
 8002750:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002754:	4641      	mov	r1, r8
 8002756:	4638      	mov	r0, r7
 8002758:	47c8      	blx	r9
 800275a:	3001      	adds	r0, #1
 800275c:	d01e      	beq.n	800279c <_printf_common+0xa4>
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	6922      	ldr	r2, [r4, #16]
 8002762:	f003 0306 	and.w	r3, r3, #6
 8002766:	2b04      	cmp	r3, #4
 8002768:	bf02      	ittt	eq
 800276a:	68e5      	ldreq	r5, [r4, #12]
 800276c:	6833      	ldreq	r3, [r6, #0]
 800276e:	1aed      	subeq	r5, r5, r3
 8002770:	68a3      	ldr	r3, [r4, #8]
 8002772:	bf0c      	ite	eq
 8002774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002778:	2500      	movne	r5, #0
 800277a:	4293      	cmp	r3, r2
 800277c:	bfc4      	itt	gt
 800277e:	1a9b      	subgt	r3, r3, r2
 8002780:	18ed      	addgt	r5, r5, r3
 8002782:	2600      	movs	r6, #0
 8002784:	341a      	adds	r4, #26
 8002786:	42b5      	cmp	r5, r6
 8002788:	d11a      	bne.n	80027c0 <_printf_common+0xc8>
 800278a:	2000      	movs	r0, #0
 800278c:	e008      	b.n	80027a0 <_printf_common+0xa8>
 800278e:	2301      	movs	r3, #1
 8002790:	4652      	mov	r2, sl
 8002792:	4641      	mov	r1, r8
 8002794:	4638      	mov	r0, r7
 8002796:	47c8      	blx	r9
 8002798:	3001      	adds	r0, #1
 800279a:	d103      	bne.n	80027a4 <_printf_common+0xac>
 800279c:	f04f 30ff 	mov.w	r0, #4294967295
 80027a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027a4:	3501      	adds	r5, #1
 80027a6:	e7c6      	b.n	8002736 <_printf_common+0x3e>
 80027a8:	18e1      	adds	r1, r4, r3
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	2030      	movs	r0, #48	@ 0x30
 80027ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80027b2:	4422      	add	r2, r4
 80027b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80027b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80027bc:	3302      	adds	r3, #2
 80027be:	e7c7      	b.n	8002750 <_printf_common+0x58>
 80027c0:	2301      	movs	r3, #1
 80027c2:	4622      	mov	r2, r4
 80027c4:	4641      	mov	r1, r8
 80027c6:	4638      	mov	r0, r7
 80027c8:	47c8      	blx	r9
 80027ca:	3001      	adds	r0, #1
 80027cc:	d0e6      	beq.n	800279c <_printf_common+0xa4>
 80027ce:	3601      	adds	r6, #1
 80027d0:	e7d9      	b.n	8002786 <_printf_common+0x8e>
	...

080027d4 <_printf_i>:
 80027d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027d8:	7e0f      	ldrb	r7, [r1, #24]
 80027da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80027dc:	2f78      	cmp	r7, #120	@ 0x78
 80027de:	4691      	mov	r9, r2
 80027e0:	4680      	mov	r8, r0
 80027e2:	460c      	mov	r4, r1
 80027e4:	469a      	mov	sl, r3
 80027e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80027ea:	d807      	bhi.n	80027fc <_printf_i+0x28>
 80027ec:	2f62      	cmp	r7, #98	@ 0x62
 80027ee:	d80a      	bhi.n	8002806 <_printf_i+0x32>
 80027f0:	2f00      	cmp	r7, #0
 80027f2:	f000 80d2 	beq.w	800299a <_printf_i+0x1c6>
 80027f6:	2f58      	cmp	r7, #88	@ 0x58
 80027f8:	f000 80b9 	beq.w	800296e <_printf_i+0x19a>
 80027fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002800:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002804:	e03a      	b.n	800287c <_printf_i+0xa8>
 8002806:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800280a:	2b15      	cmp	r3, #21
 800280c:	d8f6      	bhi.n	80027fc <_printf_i+0x28>
 800280e:	a101      	add	r1, pc, #4	@ (adr r1, 8002814 <_printf_i+0x40>)
 8002810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002814:	0800286d 	.word	0x0800286d
 8002818:	08002881 	.word	0x08002881
 800281c:	080027fd 	.word	0x080027fd
 8002820:	080027fd 	.word	0x080027fd
 8002824:	080027fd 	.word	0x080027fd
 8002828:	080027fd 	.word	0x080027fd
 800282c:	08002881 	.word	0x08002881
 8002830:	080027fd 	.word	0x080027fd
 8002834:	080027fd 	.word	0x080027fd
 8002838:	080027fd 	.word	0x080027fd
 800283c:	080027fd 	.word	0x080027fd
 8002840:	08002981 	.word	0x08002981
 8002844:	080028ab 	.word	0x080028ab
 8002848:	0800293b 	.word	0x0800293b
 800284c:	080027fd 	.word	0x080027fd
 8002850:	080027fd 	.word	0x080027fd
 8002854:	080029a3 	.word	0x080029a3
 8002858:	080027fd 	.word	0x080027fd
 800285c:	080028ab 	.word	0x080028ab
 8002860:	080027fd 	.word	0x080027fd
 8002864:	080027fd 	.word	0x080027fd
 8002868:	08002943 	.word	0x08002943
 800286c:	6833      	ldr	r3, [r6, #0]
 800286e:	1d1a      	adds	r2, r3, #4
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6032      	str	r2, [r6, #0]
 8002874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002878:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800287c:	2301      	movs	r3, #1
 800287e:	e09d      	b.n	80029bc <_printf_i+0x1e8>
 8002880:	6833      	ldr	r3, [r6, #0]
 8002882:	6820      	ldr	r0, [r4, #0]
 8002884:	1d19      	adds	r1, r3, #4
 8002886:	6031      	str	r1, [r6, #0]
 8002888:	0606      	lsls	r6, r0, #24
 800288a:	d501      	bpl.n	8002890 <_printf_i+0xbc>
 800288c:	681d      	ldr	r5, [r3, #0]
 800288e:	e003      	b.n	8002898 <_printf_i+0xc4>
 8002890:	0645      	lsls	r5, r0, #25
 8002892:	d5fb      	bpl.n	800288c <_printf_i+0xb8>
 8002894:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002898:	2d00      	cmp	r5, #0
 800289a:	da03      	bge.n	80028a4 <_printf_i+0xd0>
 800289c:	232d      	movs	r3, #45	@ 0x2d
 800289e:	426d      	negs	r5, r5
 80028a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80028a4:	4859      	ldr	r0, [pc, #356]	@ (8002a0c <_printf_i+0x238>)
 80028a6:	230a      	movs	r3, #10
 80028a8:	e011      	b.n	80028ce <_printf_i+0xfa>
 80028aa:	6821      	ldr	r1, [r4, #0]
 80028ac:	6833      	ldr	r3, [r6, #0]
 80028ae:	0608      	lsls	r0, r1, #24
 80028b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80028b4:	d402      	bmi.n	80028bc <_printf_i+0xe8>
 80028b6:	0649      	lsls	r1, r1, #25
 80028b8:	bf48      	it	mi
 80028ba:	b2ad      	uxthmi	r5, r5
 80028bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80028be:	4853      	ldr	r0, [pc, #332]	@ (8002a0c <_printf_i+0x238>)
 80028c0:	6033      	str	r3, [r6, #0]
 80028c2:	bf14      	ite	ne
 80028c4:	230a      	movne	r3, #10
 80028c6:	2308      	moveq	r3, #8
 80028c8:	2100      	movs	r1, #0
 80028ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80028ce:	6866      	ldr	r6, [r4, #4]
 80028d0:	60a6      	str	r6, [r4, #8]
 80028d2:	2e00      	cmp	r6, #0
 80028d4:	bfa2      	ittt	ge
 80028d6:	6821      	ldrge	r1, [r4, #0]
 80028d8:	f021 0104 	bicge.w	r1, r1, #4
 80028dc:	6021      	strge	r1, [r4, #0]
 80028de:	b90d      	cbnz	r5, 80028e4 <_printf_i+0x110>
 80028e0:	2e00      	cmp	r6, #0
 80028e2:	d04b      	beq.n	800297c <_printf_i+0x1a8>
 80028e4:	4616      	mov	r6, r2
 80028e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80028ea:	fb03 5711 	mls	r7, r3, r1, r5
 80028ee:	5dc7      	ldrb	r7, [r0, r7]
 80028f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80028f4:	462f      	mov	r7, r5
 80028f6:	42bb      	cmp	r3, r7
 80028f8:	460d      	mov	r5, r1
 80028fa:	d9f4      	bls.n	80028e6 <_printf_i+0x112>
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d10b      	bne.n	8002918 <_printf_i+0x144>
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	07df      	lsls	r7, r3, #31
 8002904:	d508      	bpl.n	8002918 <_printf_i+0x144>
 8002906:	6923      	ldr	r3, [r4, #16]
 8002908:	6861      	ldr	r1, [r4, #4]
 800290a:	4299      	cmp	r1, r3
 800290c:	bfde      	ittt	le
 800290e:	2330      	movle	r3, #48	@ 0x30
 8002910:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002914:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002918:	1b92      	subs	r2, r2, r6
 800291a:	6122      	str	r2, [r4, #16]
 800291c:	f8cd a000 	str.w	sl, [sp]
 8002920:	464b      	mov	r3, r9
 8002922:	aa03      	add	r2, sp, #12
 8002924:	4621      	mov	r1, r4
 8002926:	4640      	mov	r0, r8
 8002928:	f7ff fee6 	bl	80026f8 <_printf_common>
 800292c:	3001      	adds	r0, #1
 800292e:	d14a      	bne.n	80029c6 <_printf_i+0x1f2>
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	b004      	add	sp, #16
 8002936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	f043 0320 	orr.w	r3, r3, #32
 8002940:	6023      	str	r3, [r4, #0]
 8002942:	4833      	ldr	r0, [pc, #204]	@ (8002a10 <_printf_i+0x23c>)
 8002944:	2778      	movs	r7, #120	@ 0x78
 8002946:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800294a:	6823      	ldr	r3, [r4, #0]
 800294c:	6831      	ldr	r1, [r6, #0]
 800294e:	061f      	lsls	r7, r3, #24
 8002950:	f851 5b04 	ldr.w	r5, [r1], #4
 8002954:	d402      	bmi.n	800295c <_printf_i+0x188>
 8002956:	065f      	lsls	r7, r3, #25
 8002958:	bf48      	it	mi
 800295a:	b2ad      	uxthmi	r5, r5
 800295c:	6031      	str	r1, [r6, #0]
 800295e:	07d9      	lsls	r1, r3, #31
 8002960:	bf44      	itt	mi
 8002962:	f043 0320 	orrmi.w	r3, r3, #32
 8002966:	6023      	strmi	r3, [r4, #0]
 8002968:	b11d      	cbz	r5, 8002972 <_printf_i+0x19e>
 800296a:	2310      	movs	r3, #16
 800296c:	e7ac      	b.n	80028c8 <_printf_i+0xf4>
 800296e:	4827      	ldr	r0, [pc, #156]	@ (8002a0c <_printf_i+0x238>)
 8002970:	e7e9      	b.n	8002946 <_printf_i+0x172>
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	f023 0320 	bic.w	r3, r3, #32
 8002978:	6023      	str	r3, [r4, #0]
 800297a:	e7f6      	b.n	800296a <_printf_i+0x196>
 800297c:	4616      	mov	r6, r2
 800297e:	e7bd      	b.n	80028fc <_printf_i+0x128>
 8002980:	6833      	ldr	r3, [r6, #0]
 8002982:	6825      	ldr	r5, [r4, #0]
 8002984:	6961      	ldr	r1, [r4, #20]
 8002986:	1d18      	adds	r0, r3, #4
 8002988:	6030      	str	r0, [r6, #0]
 800298a:	062e      	lsls	r6, r5, #24
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	d501      	bpl.n	8002994 <_printf_i+0x1c0>
 8002990:	6019      	str	r1, [r3, #0]
 8002992:	e002      	b.n	800299a <_printf_i+0x1c6>
 8002994:	0668      	lsls	r0, r5, #25
 8002996:	d5fb      	bpl.n	8002990 <_printf_i+0x1bc>
 8002998:	8019      	strh	r1, [r3, #0]
 800299a:	2300      	movs	r3, #0
 800299c:	6123      	str	r3, [r4, #16]
 800299e:	4616      	mov	r6, r2
 80029a0:	e7bc      	b.n	800291c <_printf_i+0x148>
 80029a2:	6833      	ldr	r3, [r6, #0]
 80029a4:	1d1a      	adds	r2, r3, #4
 80029a6:	6032      	str	r2, [r6, #0]
 80029a8:	681e      	ldr	r6, [r3, #0]
 80029aa:	6862      	ldr	r2, [r4, #4]
 80029ac:	2100      	movs	r1, #0
 80029ae:	4630      	mov	r0, r6
 80029b0:	f7fd fc16 	bl	80001e0 <memchr>
 80029b4:	b108      	cbz	r0, 80029ba <_printf_i+0x1e6>
 80029b6:	1b80      	subs	r0, r0, r6
 80029b8:	6060      	str	r0, [r4, #4]
 80029ba:	6863      	ldr	r3, [r4, #4]
 80029bc:	6123      	str	r3, [r4, #16]
 80029be:	2300      	movs	r3, #0
 80029c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80029c4:	e7aa      	b.n	800291c <_printf_i+0x148>
 80029c6:	6923      	ldr	r3, [r4, #16]
 80029c8:	4632      	mov	r2, r6
 80029ca:	4649      	mov	r1, r9
 80029cc:	4640      	mov	r0, r8
 80029ce:	47d0      	blx	sl
 80029d0:	3001      	adds	r0, #1
 80029d2:	d0ad      	beq.n	8002930 <_printf_i+0x15c>
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	079b      	lsls	r3, r3, #30
 80029d8:	d413      	bmi.n	8002a02 <_printf_i+0x22e>
 80029da:	68e0      	ldr	r0, [r4, #12]
 80029dc:	9b03      	ldr	r3, [sp, #12]
 80029de:	4298      	cmp	r0, r3
 80029e0:	bfb8      	it	lt
 80029e2:	4618      	movlt	r0, r3
 80029e4:	e7a6      	b.n	8002934 <_printf_i+0x160>
 80029e6:	2301      	movs	r3, #1
 80029e8:	4632      	mov	r2, r6
 80029ea:	4649      	mov	r1, r9
 80029ec:	4640      	mov	r0, r8
 80029ee:	47d0      	blx	sl
 80029f0:	3001      	adds	r0, #1
 80029f2:	d09d      	beq.n	8002930 <_printf_i+0x15c>
 80029f4:	3501      	adds	r5, #1
 80029f6:	68e3      	ldr	r3, [r4, #12]
 80029f8:	9903      	ldr	r1, [sp, #12]
 80029fa:	1a5b      	subs	r3, r3, r1
 80029fc:	42ab      	cmp	r3, r5
 80029fe:	dcf2      	bgt.n	80029e6 <_printf_i+0x212>
 8002a00:	e7eb      	b.n	80029da <_printf_i+0x206>
 8002a02:	2500      	movs	r5, #0
 8002a04:	f104 0619 	add.w	r6, r4, #25
 8002a08:	e7f5      	b.n	80029f6 <_printf_i+0x222>
 8002a0a:	bf00      	nop
 8002a0c:	08002b51 	.word	0x08002b51
 8002a10:	08002b62 	.word	0x08002b62

08002a14 <memmove>:
 8002a14:	4288      	cmp	r0, r1
 8002a16:	b510      	push	{r4, lr}
 8002a18:	eb01 0402 	add.w	r4, r1, r2
 8002a1c:	d902      	bls.n	8002a24 <memmove+0x10>
 8002a1e:	4284      	cmp	r4, r0
 8002a20:	4623      	mov	r3, r4
 8002a22:	d807      	bhi.n	8002a34 <memmove+0x20>
 8002a24:	1e43      	subs	r3, r0, #1
 8002a26:	42a1      	cmp	r1, r4
 8002a28:	d008      	beq.n	8002a3c <memmove+0x28>
 8002a2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a32:	e7f8      	b.n	8002a26 <memmove+0x12>
 8002a34:	4402      	add	r2, r0
 8002a36:	4601      	mov	r1, r0
 8002a38:	428a      	cmp	r2, r1
 8002a3a:	d100      	bne.n	8002a3e <memmove+0x2a>
 8002a3c:	bd10      	pop	{r4, pc}
 8002a3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a46:	e7f7      	b.n	8002a38 <memmove+0x24>

08002a48 <_sbrk_r>:
 8002a48:	b538      	push	{r3, r4, r5, lr}
 8002a4a:	4d06      	ldr	r5, [pc, #24]	@ (8002a64 <_sbrk_r+0x1c>)
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	4604      	mov	r4, r0
 8002a50:	4608      	mov	r0, r1
 8002a52:	602b      	str	r3, [r5, #0]
 8002a54:	f7fd ff7c 	bl	8000950 <_sbrk>
 8002a58:	1c43      	adds	r3, r0, #1
 8002a5a:	d102      	bne.n	8002a62 <_sbrk_r+0x1a>
 8002a5c:	682b      	ldr	r3, [r5, #0]
 8002a5e:	b103      	cbz	r3, 8002a62 <_sbrk_r+0x1a>
 8002a60:	6023      	str	r3, [r4, #0]
 8002a62:	bd38      	pop	{r3, r4, r5, pc}
 8002a64:	20000200 	.word	0x20000200

08002a68 <memcpy>:
 8002a68:	440a      	add	r2, r1
 8002a6a:	4291      	cmp	r1, r2
 8002a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a70:	d100      	bne.n	8002a74 <memcpy+0xc>
 8002a72:	4770      	bx	lr
 8002a74:	b510      	push	{r4, lr}
 8002a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a7e:	4291      	cmp	r1, r2
 8002a80:	d1f9      	bne.n	8002a76 <memcpy+0xe>
 8002a82:	bd10      	pop	{r4, pc}

08002a84 <_realloc_r>:
 8002a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a88:	4680      	mov	r8, r0
 8002a8a:	4615      	mov	r5, r2
 8002a8c:	460c      	mov	r4, r1
 8002a8e:	b921      	cbnz	r1, 8002a9a <_realloc_r+0x16>
 8002a90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a94:	4611      	mov	r1, r2
 8002a96:	f7ff bc4b 	b.w	8002330 <_malloc_r>
 8002a9a:	b92a      	cbnz	r2, 8002aa8 <_realloc_r+0x24>
 8002a9c:	f7ff fbdc 	bl	8002258 <_free_r>
 8002aa0:	2400      	movs	r4, #0
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002aa8:	f000 f81a 	bl	8002ae0 <_malloc_usable_size_r>
 8002aac:	4285      	cmp	r5, r0
 8002aae:	4606      	mov	r6, r0
 8002ab0:	d802      	bhi.n	8002ab8 <_realloc_r+0x34>
 8002ab2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002ab6:	d8f4      	bhi.n	8002aa2 <_realloc_r+0x1e>
 8002ab8:	4629      	mov	r1, r5
 8002aba:	4640      	mov	r0, r8
 8002abc:	f7ff fc38 	bl	8002330 <_malloc_r>
 8002ac0:	4607      	mov	r7, r0
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	d0ec      	beq.n	8002aa0 <_realloc_r+0x1c>
 8002ac6:	42b5      	cmp	r5, r6
 8002ac8:	462a      	mov	r2, r5
 8002aca:	4621      	mov	r1, r4
 8002acc:	bf28      	it	cs
 8002ace:	4632      	movcs	r2, r6
 8002ad0:	f7ff ffca 	bl	8002a68 <memcpy>
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	4640      	mov	r0, r8
 8002ad8:	f7ff fbbe 	bl	8002258 <_free_r>
 8002adc:	463c      	mov	r4, r7
 8002ade:	e7e0      	b.n	8002aa2 <_realloc_r+0x1e>

08002ae0 <_malloc_usable_size_r>:
 8002ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ae4:	1f18      	subs	r0, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bfbc      	itt	lt
 8002aea:	580b      	ldrlt	r3, [r1, r0]
 8002aec:	18c0      	addlt	r0, r0, r3
 8002aee:	4770      	bx	lr

08002af0 <_init>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	bf00      	nop
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr

08002afc <_fini>:
 8002afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afe:	bf00      	nop
 8002b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b02:	bc08      	pop	{r3}
 8002b04:	469e      	mov	lr, r3
 8002b06:	4770      	bx	lr
